From 22f3f580caf11eb94def6b784954ce9911e68326 Mon Sep 17 00:00:00 2001
From: Rick Sherman <rick@shermdog.com>
Date: Fri, 19 Jan 2018 17:39:17 -0600
Subject: [PATCH] (PUP-8041) puppet device --resource Added the ability to
 query resources via `puppet device`

This commit adds the ability to use --resource type [title] in
conjunction with --target to gather resources via puppet device.

Users may also add --to_yaml to output resources in YAML as implemented in
puppet resource.

```
[~]# puppet device -v -t cat-6500 --resource ntp_server
Info: retrieving resource: ntp_server from cat-6500 at file:///root/cisco.yaml
ntp_server { "1.1.1.1":
  ensure => 'present',
  prefer => false,
}
ntp_server { "12.34.56.78":
  ensure => 'present',
  prefer => false,
}

[~]# puppet device -v -t cat-6500 --resource ntp_server 17.17.17.17
Info: retrieving resource: ntp_server from cat-6500 at file:///root/cisco.yaml
ntp_server { "17.17.17.17":
  ensure => 'present',
  minpoll => '4',
  maxpoll => '17',
  prefer => false,
}

[~]# puppet device -v -t cat-6500 --resource ntp_server --to_yaml
Info: retrieving resource: ntp_server from cat-6500 at file:///root/cisco.yaml
ntp_server:
  1.1.1.1:
    ensure: 'present'
    prefer: false

  12.34.56.78:
    ensure: 'present'
    prefer: false
```

Prior to this commit users were unable to query resources from nodes managed by
`puppet device` unless they passed in some undocumented commands and forced
facter values by hand.
---
 lib/puppet/application/device.rb     | 77 ++++++++++++++++++++++++++++++------
 spec/unit/application/device_spec.rb | 70 +++++++++++++++++++++++++++++++-
 2 files changed, 133 insertions(+), 14 deletions(-)

diff --git a/lib/puppet/application/device.rb b/lib/puppet/application/device.rb
index a9f81be6c..be5abc422 100644
--- a/lib/puppet/application/device.rb
+++ b/lib/puppet/application/device.rb
@@ -30,7 +30,9 @@ class Puppet::Application::Device < Puppet::Application
       :debug => false,
       :centrallogs => false,
       :setdest => false,
+      :resource => false,
       :target => nil,
+      :to_yaml => false,
     }.each do |opt,val|
       options[opt] = val
     end
@@ -40,6 +42,8 @@ class Puppet::Application::Device < Puppet::Application
 
   option("--centrallogging")
   option("--debug","-d")
+  option("--resource","-r")
+  option("--to_yaml","-y")
   option("--verbose","-v")
 
   option("--detailed-exitcodes") do |arg|
@@ -85,6 +89,7 @@ USAGE
   puppet device [-d|--debug] [--detailed-exitcodes] [--deviceconfig <file>]
                 [-h|--help] [-l|--logdest syslog|<file>|console]
                 [-v|--verbose] [-w|--waitforcert <seconds>]
+                [-r|--resource <type> [name]]
                 [-t|--target <device>] [--user=<user>] [-V|--version]
 
 
@@ -150,10 +155,18 @@ you can specify '--server <servername>' as an argument.
   appending nature of logging. It must be appended manually to make the content
   valid JSON.
 
+* --resource:
+  Displays a resource state as Puppet code, roughly equivalent to
+  `puppet resource`.  Can be filterd by title. Requires --target be specified.
+
 * --target:
   Target a specific device/certificate in the device.conf. Doing so will perform a
   device run against only that device/certificate.
 
+* --to_yaml:
+  Output found resources in yaml format, suitable to use with Hiera and
+  create_resources.
+
 * --user:
   The user to run as.
 
@@ -170,7 +183,7 @@ you can specify '--server <servername>' as an argument.
 
 EXAMPLE
 -------
-      $ puppet device --server puppet.domain.com
+      $ puppet device --target remotehost --verbose
 
 AUTHOR
 ------
@@ -186,6 +199,10 @@ Licensed under the Apache 2.0 License
 
 
   def main
+    if options[:resource] and !options[:target]
+      Puppet.err _("resource command requires target")
+      exit(1)
+    end
     vardir = Puppet[:vardir]
     confdir = Puppet[:confdir]
     certname = Puppet[:certname]
@@ -212,27 +229,45 @@ Licensed under the Apache 2.0 License
           # Handle nil scheme & port
           scheme = "#{device_url.scheme}://" if device_url.scheme
           port = ":#{device_url.port}" if device_url.port
-          Puppet.info _("starting applying configuration to %{target} at %{scheme}%{url_host}%{port}%{url_path}") % { target: device.name, scheme: scheme, url_host: device_url.host, port: port, url_path: device_url.path }
 
           # override local $vardir and $certname
           Puppet[:confdir] = ::File.join(Puppet[:devicedir], device.name)
           Puppet[:vardir] = ::File.join(Puppet[:devicedir], device.name)
           Puppet[:certname] = device.name
 
-          # this will reload and recompute default settings and create the devices sub vardir, or we hope so :-)
-          Puppet.settings.use :main, :agent, :ssl
-
           # this init the device singleton, so that the facts terminus
           # and the various network_device provider can use it
           Puppet::Util::NetworkDevice.init(device)
 
-          # ask for a ssl cert if needed, but at least
-          # setup the ssl system for this device.
-          setup_host
-
-          require 'puppet/configurer'
-          configurer = Puppet::Configurer.new
-          configurer.run(:network_device => true, :pluginsync => Puppet::Configurer.should_pluginsync?)
+          if options[:resource]
+            type, name = parse_args(command_line.args)
+            Puppet.info _("retrieving resource: %{resource} from %{target} at %{scheme}%{url_host}%{port}%{url_path}") % { resource: type, target: device.name, scheme: scheme, url_host: device_url.host, port: port, url_path: device_url.path }
+
+            resources = find_resources(type, name)
+
+            if options[:to_yaml]
+              text = resources.map do |resource|
+                resource.prune_parameters(:parameters_to_include => @extra_params).to_hierayaml.force_encoding(Encoding.default_external)
+              end.join("\n")
+              text.prepend("#{type.downcase}:\n")
+            else
+              text = resources.map do |resource|
+                resource.prune_parameters(:parameters_to_include => @extra_params).to_manifest.force_encoding(Encoding.default_external)
+              end.join("\n")
+            end
+            (puts text)
+          else
+            Puppet.info _("starting applying configuration to %{target} at %{scheme}%{url_host}%{port}%{url_path}") % { target: device.name, scheme: scheme, url_host: device_url.host, port: port, url_path: device_url.path }
+            # this will reload and recompute default settings and create the devices sub vardir
+            Puppet.settings.use :main, :agent, :ssl
+            # ask for a ssl cert if needed, but at least
+            # setup the ssl system for this device.
+            setup_host
+
+            require 'puppet/configurer'
+            configurer = Puppet::Configurer.new
+            configurer.run(:network_device => true, :pluginsync => Puppet::Configurer.should_pluginsync?)
+          end
         rescue => detail
           Puppet.log_exception(detail)
           # If we rescued an error, then we return 1 as the exit code
@@ -258,6 +293,24 @@ Licensed under the Apache 2.0 License
     end
   end
 
+  def parse_args(args)
+    type = args.shift or raise _("You must specify the type to display")
+    Puppet::Type.type(type) or raise _("Could not find type %{type}") % { type: type }
+    name = args.shift
+
+    [type, name]
+  end
+
+  def find_resources(type, name)
+    key = [type, name].join('/')
+
+    if name
+      [ Puppet::Resource.indirection.find( key ) ]
+    else
+      Puppet::Resource.indirection.search( key, {} )
+    end
+  end
+
   def setup_host
     @host = Puppet::SSL::Host.new
     waitforcert = options[:waitforcert] || (Puppet[:onetime] ? 0 : Puppet[:waitforcert])
--
2.14.3

